name: duplicate-guard
on:
  pull_request:
    paths: ["content/**/index.mdx"]
jobs:
  dup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Pairwise Jaccard
        run: |
          node -e '
            const fs=require("fs"),path=require("path");
            const files=[]; (function walk(d){ if(!fs.existsSync(d))return;
              for(const f of fs.readdirSync(d)){ const p=path.join(d,f); const s=fs.statSync(p);
                if(s.isDirectory()) walk(p); else if(f==="index.mdx") files.push(p);} })("content");
            function sh(s){ s=s.toLowerCase().replace(/[^a-z0-9\s]/g," "); const t=s.split(/\s+/).filter(Boolean); const g=new Set(); for(let i=0;i<=t.length-3;i++) g.add(t.slice(i,i+3).join(" ")); return g;}
            function j(a,b){ const A=sh(a),B=sh(b); let inter=0; A.forEach(x=>{ if(B.has(x)) inter++; }); const uni=A.size+B.size-inter; return inter/Math.max(1,uni); }
            let fail=false;
            for(let i=0;i<files.length;i++){ const ai=fs.readFileSync(files[i],"utf8");
              for(let j=i+1;j<files.length;j++){ const aj=fs.readFileSync(files[j],"utf8"); const jac=j(ai,aj);
                if(jac>=0.30){ console.log("DUPLICATE_GUARD:", files[i], "<->", files[j], "Jaccard="+jac.toFixed(3)); fail=true; } } }
            if(fail) process.exit(1);
          '
